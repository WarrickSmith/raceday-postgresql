<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>2</epicId>
    <storyId>2.10</storyId>
    <title>Dynamic Scheduler with Time-Based Intervals - Data Population Remediation</title>
    <status>In Progress - Critical Blockers Found</status>
    <generatedAt>2025-10-16</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/warrick/Dev/raceday-postgresql/docs/stories/story-2.10.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>developer</asA>
    <iWant>comprehensive data population pipeline with proper partitions, schema alignment, and processing logic</iWant>
    <soThat>scheduler can function with complete data flow and client applications receive full data sets</soThat>
    <tasks>
      - Phase 1: Database Partition Automation (CRITICAL)
      - Phase 2: Schema Alignment with Missing Fields (HIGH)
      - Phase 3: Enhanced Data Processing Logic (HIGH)
      - Phase 4: End-to-End Testing & Validation (MEDIUM)
    </tasks>
  </story>

  <acceptanceCriteria>
    1. Daily partitions are automatically created for time-series tables (money_flow_history, odds_history)
    2. All 50+ missing database fields are added and populated from NZTAB API data
    3. Race pools data is extracted and stored in race_pools table
    4. Money flow incremental calculations work properly with time-bucketing
    5. Odds change detection prevents duplicate records
    6. Integration tests pass with complete data flow
    7. Client applications can access comprehensive data sets
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc path="docs/tech-spec-epic-2.md" title="Epic 2 Technical Specification" section="Time-Series Database Design" relevance="Defines partition strategy and time-series table structures">
        Technical specification for Epic 2 data pipeline. Section on time-series design (lines 90-156) describes daily partitioning strategy for money_flow_history and odds_history tables. Critical for understanding partition automation requirements.
      </doc>
      <doc path="docs/story-context-2.10.xml" title="Original Story Context" section="Scheduler Requirements" relevance="Original scheduler implementation context and constraints">
        Original story context defining scheduler behavior, database query constraints, and integration points. Provides baseline for remediation scope.
      </doc>
      <doc path="docs/CODING-STANDARDS.md" title="Coding Standards" section="Database Standards" relevance="Database migration and schema alignment standards">
        Database schema standards and migration patterns for adding missing fields while maintaining compatibility.
      </doc>
      <doc path="docs/stories/story-2.10.md" title="Story 2.10 Requirements" section="Complete Story Specification" relevance="Full story requirements with detailed task breakdown and acceptance criteria">
        Source story document containing complete requirements, tasks/subtasks breakdown, and detailed acceptance criteria. Essential reference for implementation scope and validation criteria.
      </doc>
      <doc path="server-old/daily-races/src/data-processors.js" title="Original Data Processing Examples" section="Data Transformation Functions" relevance="Code examples for data processing and transformation from NZTAB API to database schema">
        Original data processing implementation showing field mappings, validation logic, and transformation patterns. Critical for understanding entrant and race data processing requirements and field mappings.
      </doc>
      <doc path="server-old/enhanced-race-poller/src/database-utils.js" title="Enhanced Database Processing Examples" section="Advanced Data Processing and Validation" relevance="Comprehensive examples of pool processing, money flow calculations, and data validation">
        Advanced data processing implementation showing race pools extraction, money flow incremental calculations, odds change detection, and mathematical validation logic. Essential for implementing enhanced data processing features.
      </doc>
    </docs>
    <code>
      <artifact path="server/src/database/time-series.ts" kind="module" symbol="insertMoneyFlowHistory" lines="120-140" relevance="Time-series partition management and money flow insertion logic">
        Current time-series insertion functions that require partition existence. Shows partition validation logic and error handling for missing partitions.
      </artifact>
      <artifact path="server/src/pipeline/race-processor.ts" kind="module" symbol="persistTransformedRace" lines="240-290" relevance="Race data persistence and transformation logic">
        Main race processing pipeline that needs enhancement for missing fields and data processing logic. Current implementation incomplete for race pools and money flow calculations.
      </artifact>
      <artifact path="server/src/workers/transformWorker.ts" kind="module" symbol="transformRaceData" lines="1-50" relevance="Data transformation from NZTAB API to database schema">
        Transform worker responsible for mapping API data to database schema. Missing logic for race pools, money flow incremental calculations, and odds change detection.
      </artifact>
      <artifact path="server/tests/integration/initialization/daily-baseline.integration.test.ts" kind="test" symbol="daily baseline test" lines="210-225" relevance="Integration test revealing data population issues">
        Failing integration test that exposes missing data population functionality. Expected race IDs not found in scheduler results, indicating broken data pipeline.
      </artifact>
      <artifact path="server-old/daily-races/src/data-processors.js" kind="module" symbol="transformEntrantData" lines="141-182" relevance="Complete entrant data transformation with all missing fields">
        Reference implementation showing all required entrant fields (barrier, jockey, trainer, silk colours, odds) and transformation logic. Essential for understanding complete field mapping requirements.
      </artifact>
      <artifact path="server-old/enhanced-race-poller/src/database-utils.js" kind="module" symbol="extractPoolTotals" lines="136-205" relevance="Race pools extraction and validation implementation">
        Reference implementation for extracting tote_pools data from NZTAB API with validation, currency conversion, and error handling. Critical for race pools population.
      </artifact>
      <artifact path="server-old/enhanced-race-poller/src/database-utils.js" kind="module" symbol="saveMoneyFlowHistory" lines="435-565" relevance="Money flow processing with timeline calculations and pool amount computations">
        Reference implementation showing money flow processing, time-to-start calculations, pool amount computations, and enhanced metadata fields. Essential for money flow enhancement.
      </artifact>
    </code>
    <dependencies>
      <node>
        <package name="pg" version="^8.16.3">PostgreSQL client for partition management and database operations</package>
        <package name="pino" version="^9.5.0">Structured logging for partition creation and data pipeline operations</package>
        <package name="typescript" version="^5.7.0">TypeScript compiler with strict mode for type-safe schema operations</package>
        <package name="vitest" version="^2.0.0">Testing framework for comprehensive integration test coverage</package>
      </node>
      <builtin>
        <module name="PostgreSQL partitioning">Native PostgreSQL partition management for time-series tables</module>
        <module name="Database migrations">Schema migration system for adding missing fields safely</module>
      </builtin>
    </dependencies>
  </artifacts>

  <constraints>
    - Partition automation MUST create daily partitions for current and future dates automatically
    - Schema alignment MUST maintain backward compatibility with existing client applications
    - All missing fields MUST be mapped from NZTAB API response data where available
    - Money flow calculations MUST be mathematically consistent and incrementally correct
    - Odds processing MUST prevent duplicate records through change detection
    - Race pools extraction MUST handle all pool types (win, place, quinella, trifecta, etc.)
    - Database operations MUST maintain performance targets (5 races in &lt;15s, single race in &lt;2s)
    - All modifications MUST follow existing TypeScript strict mode standards
    - Integration tests MUST cover complete end-to-end data flow from API to database
  </constraints>

  <interfaces>
    <interface name="ensurePartition" kind="function" signature="ensurePartition(tableName: string, date: Date): Promise&lt;void&gt;" path="server/src/database/time-series.ts">
      Partition management function that creates daily partitions if they don't exist. Critical for preventing PartitionNotFoundError in production.
    </interface>
    <interface name="transformRaceData" kind="function" signature="transformRaceData(apiData: any, raceId: string): Promise&lt;TransformedRaceData&gt;" path="server/src/workers/transformWorker.ts">
      Enhanced data transformation function that extracts all fields including race pools, calculates incremental money flow, and detects odds changes.
    </interface>
    <interface name="processRace" kind="function" signature="processRace(raceId: string, options?: ProcessOptions): Promise&lt;ProcessResult&gt;" path="server/src/pipeline/race-processor.ts">
      Main race processing function that needs to handle complete data population including race pools and enhanced money flow processing.
    </interface>
  </interfaces>

  <tests>
    <standards>
      Testing strategy uses Vitest for both unit and integration tests. Unit tests mock external dependencies (database, APIs) and test individual components. Integration tests use real PostgreSQL test database with comprehensive fixtures. All tests must validate partition creation, schema alignment, and end-to-end data flow. Coverage target: &gt;90% for enhanced pipeline components.
    </standards>
    <locations>
      - server/tests/unit/database/time-series.test.ts (partition management tests)
      - server/tests/unit/workers/transformWorker.test.ts (data transformation tests)
      - server/tests/unit/pipeline/race-processor.test.ts (enhanced processing tests)
      - server/tests/integration/pipeline/ (end-to-end data flow tests)
      - server/tests/integration/initialization/ (daily baseline and scheduler tests)
    </locations>
    <ideas>
      - AC1: Unit test for ensurePartition() with various date scenarios (today, tomorrow, past dates)
      - AC2: Integration test for schema migration validating all 50+ fields are populated correctly
      - AC3: Unit test for race pools extraction from NZTAB API response with various pool types
      - AC4: Integration test for money flow incremental calculations over time periods
      - AC5: Unit test for odds change detection preventing duplicate records
      - AC6: End-to-end integration test simulating complete data pipeline from API to database
      - AC7: Integration test verifying client application data access patterns
    </ideas>
  </tests>
</story-context>