<story-context id="bmad/bmm/workflows/4-implementation/story-context/1.6" v="1.0">
  <metadata>
    <epicId>1</epicId>
    <storyId>6</storyId>
    <title>Environment Variable Validation with Zod</title>
    <status>Draft</status>
    <generatedAt>2025-10-07</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/warrick/Dev/raceday-postgresql/docs/stories/story-1.6.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>developer</asA>
    <iWant>environment variables validated at startup using Zod</iWant>
    <soThat>configuration errors are caught immediately with clear messages</soThat>
    <tasks>
      - Task 1: Remove DATABASE_URL from environment validation (AC: 8)
      - Task 2: Update Zod schema with individual DB components (AC: 1, 2, 3)
      - Task 3: Update application code to build DATABASE_URL from components (AC: 8)
      - Task 4: Update test environment configuration (AC: 2, 8)
      - Task 5: Validate error handling and messaging (AC: 5, 6)
      - Task 6: Update documentation (AC: 8)
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="1">Zod schema defined for all required environment variables</criterion>
    <criterion id="2">Required variables: NODE_ENV, DB_HOST, DB_PORT, DB_USER, DB_PASSWORD, DB_NAME, NZTAB_API_URL, PORT</criterion>
    <criterion id="3">Type coercion for numeric values (PORT, DB_PORT, DB_POOL_MAX â†’ number)</criterion>
    <criterion id="4">URL validation for NZTAB_API_URL</criterion>
    <criterion id="5">Application fails fast on startup if any validation fails</criterion>
    <criterion id="6">Clear error messages indicating which variable is invalid</criterion>
    <criterion id="7">Validated config exported as typed constant (env)</criterion>
    <criterion id="8">DATABASE_URL environment variable removed - replaced with individual DB component variables (DB_HOST, DB_PORT, DB_USER, DB_PASSWORD, DB_NAME)</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/tech-spec-epic-1.md</path>
        <title>Technical Specification: Epic 1 - Core Infrastructure Setup</title>
        <section>Environment Configuration</section>
        <snippet>Lines 379-425: Environment Variables Schema with Zod validation patterns. NOTE: Tech spec shows DATABASE_URL but current implementation uses DB component variables (DB_HOST, DB_PORT, DB_USER, DB_PASSWORD, DB_NAME) per Story 1.5.</snippet>
        <relevance>Defines original environment variable schema and Zod validation approach. Story 1.6 corrects DATABASE_URL to use component variables.</relevance>
      </doc>
      <doc>
        <path>docs/epic-stories-2025-10-05.md</path>
        <title>Epic Breakdown - Story 1.6</title>
        <section>Story 1.6: Environment Variable Validation with Zod</section>
        <snippet>Lines 118-131: Story definition with acceptance criteria for Zod validation, type coercion, URL validation, and fail-fast behavior.</snippet>
        <relevance>Source story definition from epic breakdown.</relevance>
      </doc>
      <doc>
        <path>server/.env.example</path>
        <title>Environment Variables Example</title>
        <section>Database Configuration</section>
        <snippet>DB_HOST, DB_PORT, DB_USER, DB_PASSWORD, DB_NAME format already in use. No DATABASE_URL present.</snippet>
        <relevance>Shows correct format using individual DB component variables instead of DATABASE_URL.</relevance>
      </doc>
      <doc>
        <path>docs/stories/story-1.5.md</path>
        <title>Story 1.5: Docker Configuration</title>
        <section>Docker Compose Environment Variables</section>
        <snippet>server/docker-compose.yml passes DB_HOST, DB_PORT, DB_USER, DB_PASSWORD, DB_NAME as individual environment variables. Removed NZTAB_API_KEY (public API).</snippet>
        <relevance>Story 1.5 already implemented DB component variable approach. Story 1.6 must align Zod schema with this.</relevance>
      </doc>
    </docs>

    <code>
      <artifact>
        <path>server/src/database/run-migrations.ts</path>
        <kind>function</kind>
        <symbol>buildDatabaseUrl</symbol>
        <lines>8-14</lines>
        <reason>Existing pattern for constructing DATABASE_URL from DB component variables. Should be reused in env.ts.</reason>
      </artifact>
      <artifact>
        <path>server/src/shared/logger.ts</path>
        <kind>module</kind>
        <symbol>logger</symbol>
        <lines>1-15</lines>
        <reason>Logger used for logging environment validation errors. Import and use for error output.</reason>
      </artifact>
      <artifact>
        <path>server/tests/unit/environment-config.test.ts</path>
        <kind>test-suite</kind>
        <symbol>Environment Configuration tests</symbol>
        <lines>all</lines>
        <reason>Existing test suite for environment validation. Must be updated to test DB component variables instead of DATABASE_URL.</reason>
      </artifact>
    </code>

    <dependencies>
      <node>
        <package>zod</package>
        <version>^3.22.0</version>
        <purpose>Schema validation for environment variables</purpose>
      </node>
      <node>
        <package>dotenv</package>
        <version>^16.0.0</version>
        <purpose>Load environment variables from .env file</purpose>
      </node>
      <node>
        <package>pg</package>
        <version>^8.11.0</version>
        <purpose>PostgreSQL client (uses constructed DATABASE_URL)</purpose>
      </node>
      <node>
        <package>vitest</package>
        <version>^1.0.0</version>
        <purpose>Test framework for environment validation tests</purpose>
      </node>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint>Zod validation must use .parse() for fail-fast behavior on startup (throw on invalid config)</constraint>
    <constraint>Type coercion must use z.coerce.number() for numeric environment variables (PORT, DB_PORT, etc.)</constraint>
    <constraint>No 'any' types allowed in environment schema (strict TypeScript)</constraint>
    <constraint>DATABASE_URL must be constructed at runtime from DB component variables, not read from environment</constraint>
    <constraint>Validation errors must include field name and specific validation failure reason</constraint>
    <constraint>NODE_ENV must be enum-validated to 'development' | 'production' | 'test'</constraint>
    <constraint>URL validation required for NZTAB_API_URL using z.string().url()</constraint>
    <constraint>All database component variables (DB_HOST, DB_PORT, DB_USER, DB_PASSWORD, DB_NAME) are required</constraint>
    <constraint>LOG_LEVEL must default to 'info' if not provided</constraint>
    <constraint>Numeric environment variables must be validated as positive integers where applicable</constraint>
  </constraints>

  <interfaces>
    <interface>
      <name>EnvSchema (Zod)</name>
      <kind>type-schema</kind>
      <signature>
z.object({
  NODE_ENV: z.enum(['development', 'production', 'test']),
  DB_HOST: z.string().min(1),
  DB_PORT: z.coerce.number().int().positive(),
  DB_USER: z.string().min(1),
  DB_PASSWORD: z.string().min(1),
  DB_NAME: z.string().min(1),
  NZTAB_API_URL: z.string().url(),
  PORT: z.coerce.number().int().positive().default(7000),
  LOG_LEVEL: z.enum(['debug', 'info', 'warn', 'error']).default('info'),
  UV_THREADPOOL_SIZE: z.coerce.number().int().positive().default(8),
  MAX_WORKER_THREADS: z.coerce.number().int().positive().default(3),
  DB_POOL_MAX: z.coerce.number().int().positive().default(10),
})
      </signature>
      <path>server/src/shared/env.ts</path>
      <notes>Schema validates environment variables. Export inferred type as 'Env' and validated instance as 'env'.</notes>
    </interface>
    <interface>
      <name>buildDatabaseUrl</name>
      <kind>function</kind>
      <signature>(dbName: string) => string</signature>
      <path>server/src/database/run-migrations.ts (lines 8-14)</path>
      <notes>Existing helper to construct PostgreSQL connection URL from DB component variables. Reuse this pattern in env.ts or connection code.</notes>
    </interface>
  </interfaces>

  <tests>
    <standards>
      Testing framework: Vitest. Location: server/tests/unit/ and server/tests/integration/.
      Unit tests validate environment schema using invalid inputs (missing vars, wrong types, invalid URLs).
      Integration tests verify database connection works with constructed URL.
      Test naming: *.test.ts files with describe/it structure.
      Assertions: Use expect() from vitest.
      Coverage: All validation paths (valid config, missing required vars, invalid types, invalid URLs, default values).
    </standards>

    <locations>
      - server/tests/unit/environment-config.test.ts (update existing tests)
      - server/tests/integration/database-connection.test.ts (verify constructed URL works)
    </locations>

    <ideas>
      <idea ac="1">Test valid environment variables pass Zod validation without errors</idea>
      <idea ac="2">Test all required variables (NODE_ENV, DB_HOST, DB_PORT, DB_USER, DB_PASSWORD, DB_NAME, NZTAB_API_URL, PORT) are validated</idea>
      <idea ac="3">Test type coercion: PORT='7000' (string) converts to 7000 (number), DB_PORT='5432' converts to 5432</idea>
      <idea ac="3">Test invalid PORT (string 'abc') throws Zod validation error</idea>
      <idea ac="3">Test invalid DB_PORT (string 'xyz') throws Zod validation error</idea>
      <idea ac="4">Test invalid NZTAB_API_URL (string 'not-a-url') throws validation error with clear message</idea>
      <idea ac="4">Test valid NZTAB_API_URL (https://api.tab.co.nz) passes validation</idea>
      <idea ac="5">Test missing required variable (e.g., DB_HOST) causes application to fail on startup</idea>
      <idea ac="6">Test validation error message includes field name (e.g., 'DB_PORT' or 'NZTAB_API_URL') and reason</idea>
      <idea ac="7">Test env export is typed correctly (type Env = z.infer&lt;typeof EnvSchema&gt;)</idea>
      <idea ac="8">Test DATABASE_URL is NOT in EnvSchema (removed)</idea>
      <idea ac="8">Test constructed DATABASE_URL from components has correct format: postgresql://user:pass@host:port/dbname</idea>
      <idea>Test default values: LOG_LEVEL defaults to 'info', UV_THREADPOOL_SIZE defaults to 8, PORT defaults to 7000</idea>
      <idea>Integration test: Verify database connection pool can connect using constructed DATABASE_URL</idea>
    </ideas>
  </tests>
</story-context>
